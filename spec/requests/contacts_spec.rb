# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/contacts', type: :request do
  let(:user) { create(:user) }
  let(:invalid_attributes) do
    {
      cpf: '12345678901'
    }
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # ContactsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    {}
  end

  before { sign_in(user) }

  describe 'GET /index' do
    it 'renders a successful response' do
      create(:contact, user:)
      get contacts_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      contact = create(:contact, user:)
      get contact_url(contact), as: :json
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    let(:valid_attributes) do
      {
        name: Faker::Name.unique.name,
        cpf: '14791485041',
        phone: Faker::PhoneNumber.phone_number,
        address: {
          logradouro: 'Rua Presidente Pedreira',
          numero: '33',
          bairro: 'Ingá',
          localidade: 'Niterói',
          uf: 'RJ'
        },
        zipcode: Faker::Address.zip_code
      }
    end

    context 'with valid parameters' do
      it 'creates a new Contact' do
        expect do
          post contacts_url,
               params: { contact: valid_attributes }, headers: valid_headers, as: :json
        end.to change(Contact, :count).by(1)
      end

      it 'renders a JSON response with the new contact', :aggregate_failures do
        post contacts_url,
             params: { contact: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json'))
      end

      it 'enqueue a geolocation job' do
        expect do
          post contacts_url,
               params: { contact: valid_attributes }, headers: valid_headers, as: :json
        end.to enqueue_sidekiq_job(UpdateGeolocationJob)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Contact' do
        expect do
          post contacts_url,
               params: { contact: invalid_attributes }, as: :json
        end.not_to change(Contact, :count)
      end

      it 'renders a JSON response with errors for the new contact', :aggregate_failures do
        post contacts_url,
             params: { contact: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          'name' => Faker::Name.unique.name,
          'cpf' => '14791485041',
          'phone' => Faker::PhoneNumber.phone_number,
          'address' => {
            'logradouro' => 'Rua Presidente Prudente',
            'numero' => '66',
            'bairro' => 'Logo Ali',
            'localidade' => 'Big Field',
            'uf' => 'RJ'
          },
          'zipcode' => Faker::Address.zip_code
        }
      end

      it 'updates the requested contact', :aggregate_failures do
        contact = create(:contact, user:)
        patch contact_url(contact),
              params: { contact: new_attributes }, headers: valid_headers, as: :json
        contact.reload

        expect(contact.attributes.extract!('name', 'cpf', 'phone', 'address', 'zipcode')).to eq(new_attributes)
      end

      it 'renders a JSON response with the contact', :aggregate_failures do
        contact = create(:contact, user:)
        patch contact_url(contact),
              params: { contact: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'renders a JSON response with errors for the contact', :aggregate_failures do
        contact = create(:contact, user:)
        patch contact_url(contact),
              params: { contact: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested contact' do
      contact = create(:contact, user:)
      expect do
        delete contact_url(contact), headers: valid_headers, as: :json
      end.to change(Contact, :count).by(-1)
    end
  end
end
